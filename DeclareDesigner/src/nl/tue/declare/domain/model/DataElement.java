/* Generated by Together */

package nl.tue.declare.domain.model;

import nl.tue.declare.domain.*;

public class DataElement
    extends Base {

  private AssignmentModel assignmentModel;

  private String name;
  private Type type;
  private String initial;

  public DataElement(int aId, AssignmentModel anAssignmentModel, String name,
                     String ini, Type type) {
    super(aId);
    this.assignmentModel = anAssignmentModel;
    this.name = name;
    this.type = type;
    this.initial = ini;
    init();
  }

  public DataElement(DataElement data) {
    this(data.getId(), data.assignmentModel, new String(data.name),
         new String(data.initial), data.type);
  }

  private void init() {
    if (!type.parse(this.getInitial())) {
      this.setInitial(type.getIni());
    }
  }

  /**
   * clone
   *
   * @return Object
   */
  public Object clone() {
    return new DataElement(getId(), assignmentModel, this.name, this.initial,
                           this.type);
  }

  public void setName(String name) {
    this.name = name;
  }

  public boolean setType(Type type) {
    this.type = type;
    return true;
  }

  public void setInitial(String initial) {
    this.initial = initial;
  }

  public String getName() {
    return name;
  }

  public Type getType() {
    return type;
  }

  public String getInitial() {
    return initial;
  }

  public String toString() {
    return this.name;
  }

  /**
   * parse
   *
   * @param value String
   * @return boolean
   */
  public boolean parse(String value) {
    return type.parse(value);
  }

  public String emptyValue() {
    return type.emptyValue();
  }

  public Object getObjectValue(String v) {
    return this.type.value(v);
  }

  /**
   * maps
   */
  public boolean maps(String name, String type) {
    boolean maps = this.type.maps(type);
    if (maps) {
      maps = this.name.toUpperCase().equals(name.toUpperCase());
    }
    return maps;
  }

  /**
   *
   * <p>Title: DECLARE</p>
   *
   * <p>Description: </p>
   *
   * <p>Copyright: Copyright (c) 2006</p>
   *
   * <p>Company: TU/e</p>
   *
   * @author Maja Pesic
   * @version 1.0
   */
  public enum Type {
    STRING("string", StringValue.singleton(), "NOT_DEFINED"),
    INTEGER("integer", IntegerValue.singleton(), "0"),
    DOUBLE("double", DoubleValue.singleton(), "0.0"),
    BOOLEAN("boolean", BooleanValue.singleton(), "true");

    private final String name;
    private final IValue value;
    private final String ini;

    Type(String name, IValue value, String ini) {
      this.name = name;
      this.value = value;
      if (value.parse(ini)) {
        this.ini = ini;
      }
      else {
        this.ini = null;
      }
    }

    public String getName() {
      return name;
    }

    public String getIni() {
      return ini;
    }

    /**
     *
     * @param name String
     * @return Type
     */
    public static Type getName(String name) {
      Type[] values = Type.values();
      boolean found = false;
      int i = 0;
      Type type = null;
      while (!found && i < values.length) {
        type = values[i++];
        found = eqalNames(type.getName(), name);
      }
      return found ? type : null;
    }

    private static boolean eqalNames(String name1, String name2) {
      return name1.toUpperCase().equals(name2.toUpperCase());
    }

    public String toString() {
      return name;
    }

    /**
     *
     * @param value String
     * @return boolean
     */
    public boolean parse(String value) {
      return this.value.parse(value);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean more(String value1, String value2) {
      return this.value.more(value1, value2);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean moreEqual(String value1, String value2) {
      return this.value.moreEqual(value1, value2);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean less(String value1, String value2) {
      return this.value.less(value1, value2);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean lessEqual(String value1, String value2) {
      return this.value.lessEqual(value1, value2);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean equal(String value1, String value2) {
      return this.value.equal(value1, value2);
    }

    /**
     *
     * @param value1 String
     * @param value2 String
     * @return boolean
     */
    public boolean notEqual(String value1, String value2) {
      return!this.value.equal(value1, value2);
    }

    /**
     *
     * @param value String
     * @return boolean
     */
    public boolean bool(String value) {
      return this.value.bool(value);
    }

    Object value(String value) {
      return this.value.value(value);
    }

    public String emptyValue() {
      return value.emptyValue();
    }

    /**
     * maps
     */
    public boolean maps(String type) {
      Type TYPE = getName(type); // get the Type object
      boolean maps = false;
      if (TYPE == null) {
        maps = eqalNames(name, Type.STRING.name); // for unknown types maps to STRING
      }
      else {
        maps = eqalNames(name, type); // for known types map if names are equal
      }
      return maps;
    }
  }
}

interface IValue {
  /**
   *
   * @param value String
   * @return boolean
   */
  boolean parse(String value);

  /**
   *
   * @param value1 String
   * @param value2 String
   * @return boolean
   */
  boolean moreEqual(String value1, String value2);

  /**
   *
   * @param value1 String
   * @param value2 String
   * @return boolean
   */
  boolean more(String value1, String value2);

  /**
   *
   * @param value1 String
   * @param value2 String
   * @return boolean
   */
  boolean less(String value1, String value2);

  /**
   *
   * @param value1 String
   * @param value2 String
   * @return boolean
   */
  boolean lessEqual(String value1, String value2);

  /**
   *
   * @param value1 String
   * @param value2 String
   * @return boolean
   */
  boolean equal(String value1, String value2);

  /**
   *
   * @param value String
   * @return boolean
   */
  boolean bool(String value);

  Object value(String value);

  String emptyValue();
}

/**
 *
 * <p>Title: DECLARE</p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2006</p>
 *
 * <p>Company: TU/e</p>
 *
 * @author Maja Pesic
 * @version 1.0
 */

class IntegerValue
    implements IValue {

  private IntegerValue() {
    super();
  }

  static IntegerValue singleton() {
    return new IntegerValue();
  }

  public boolean moreEqual(String value1, String value2) {
    int int1 = Integer.parseInt(value1);
    int int2 = Integer.parseInt(value2);
    return (int1 >= int2);
  }

  public boolean more(String value1, String value2) {
    int int1 = Integer.parseInt(value1);
    int int2 = Integer.parseInt(value2);
    return (int1 > int2);
  }

  public boolean less(String value1, String value2) {
    int int1 = Integer.parseInt(value1);
    int int2 = Integer.parseInt(value2);
    return (int1 < int2);
  }

  public boolean lessEqual(String value1, String value2) {
    int int1 = Integer.parseInt(value1);
    int int2 = Integer.parseInt(value2);
    return (int1 <= int2);
  }

  public boolean equal(String value1, String value2) {
    int int1 = Integer.parseInt(value1);
    int int2 = Integer.parseInt(value2);
    return (int1 == int2);
  }

  public boolean bool(String value) {
    return parse(value);
  }

  public boolean parse(String value) {
    boolean ok = true;
    try {
      Integer.parseInt(value);
    }
    catch (NumberFormatException e) {
      ok = false;
    }
    return ok;
  }

  public Object value(String value) {
    Integer integer = new Integer(0);
    try {
      integer = new Integer(value);
    }
    catch (Exception e) {
    }
    return integer;
  }

  public String emptyValue() {
    return "0";
  }
}

/**
 *
 * <p>Title: DECLARE</p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2006</p>
 *
 * <p>Company: TU/e</p>
 *
 * @author Maja Pesic
 * @version 1.0
 */
class DoubleValue
    implements IValue {

  private DoubleValue() {
    super();
  }

  static DoubleValue singleton() {
    return new DoubleValue();
  }

  public boolean moreEqual(String value1, String value2) {
    double double1 = Double.parseDouble(value1);
    double double2 = Double.parseDouble(value2);
    return (double1 >= double2);
  }

  public boolean more(String value1, String value2) {
    double double1 = Double.parseDouble(value1);
    double double2 = Double.parseDouble(value2);
    return (double1 > double2);
  }

  public boolean less(String value1, String value2) {
    double double1 = Double.parseDouble(value1);
    double double2 = Double.parseDouble(value2);
    return (double1 < double2);
  }

  public boolean lessEqual(String value1, String value2) {
    double double1 = Double.parseDouble(value1);
    double double2 = Double.parseDouble(value2);
    return (double1 <= double2);
  }

  public boolean equal(String value1, String value2) {
    double double1 = Double.parseDouble(value1);
    double double2 = Double.parseDouble(value2);
    return (double1 == double2);
  }

  public boolean bool(String value) {
    return parse(value);
  }

  public boolean parse(String value) {
    boolean ok = true;
    try {
      Double.parseDouble(value);
    }
    catch (NumberFormatException e) {
      ok = false;
    }
    return ok;
  }

  public Object value(String value) {
    return new Double(value);
  }

  public String emptyValue() {
    return "0";
  }
}

/**
 *
 * <p>Title: DECLARE</p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2006</p>
 *
 * <p>Company: TU/e</p>
 *
 * @author Maja Pesic
 * @version 1.0
 */
class BooleanValue
    implements IValue {

  private BooleanValue() {
    super();
  }

  static BooleanValue singleton() {
    return new BooleanValue();
  }

  public boolean moreEqual(String value1, String value2) {
    return false;
  }

  public boolean more(String value1, String value2) {
    return false;
  }

  public boolean less(String value1, String value2) {
    return false;
  }

  public boolean lessEqual(String value1, String value2) {
    return false;
  }

  public boolean equal(String value1, String value2) {
    return Boolean.parseBoolean(value1) == Boolean.parseBoolean(value2);
  }

  public boolean bool(String value) {
    return Boolean.parseBoolean(value);
  }

  public boolean parse(String value) {
    boolean ok = true;
    try {
      Boolean.parseBoolean(value);
    }
    catch (NumberFormatException e) {
      ok = false;
    }
    return ok;
  }

  public Object value(String value) {
    return new Boolean(value);
  }

  public String emptyValue() {
    return "false";
  }
}

/**
 *
 * <p>Title: DECLARE</p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2006</p>
 *
 * <p>Company: TU/e</p>
 *
 * @author Maja Pesic
 * @version 1.0
 */
class StringValue
    implements IValue {

  private StringValue() {
    super();
  }

  static StringValue singleton() {
    return new StringValue();
  }

  public boolean moreEqual(String value1, String value2) {
    return value1.equals(value2);
  }

  public boolean more(String value1, String value2) {
    return false;
  }

  public boolean less(String value1, String value2) {
    return false;
  }

  public boolean lessEqual(String value1, String value2) {
    return false;
  }

  public boolean equal(String value1, String value2) {
    return value1.equals(value2);
  }

  public boolean bool(String value) {
    return true;
  }

  public boolean parse(String value) {
    return true;
  }

  public Object value(String value) {
    return new String(value);
  }

  public String emptyValue() {
    return "";
  }
}
