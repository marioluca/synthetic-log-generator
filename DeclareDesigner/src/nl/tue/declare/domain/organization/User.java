/* Generated by Together */

package nl.tue.declare.domain.organization;

import java.util.*;

import nl.tue.declare.domain.BaseCollection;

public class User
    extends Person {
  private String userName;
  private String password;

  /**
   * @clientCardinality 0..*
   * @supplierCardinality 0..*
   */
  private BaseCollection<Role> roles;
  /**
   * User
   *
   * @param aId int
   */
  public User(int aId) {
    super(aId);
    roles = new BaseCollection<Role>();
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public String getUserName() {
    return userName;
  }

  public String getPassword() {
    return password;
  }

  public Collection<Role> getRoles() {
    return roles;
  }
  
  public Role getRoleWithId(int id) {
	    return roles.getItemWithId(id);
  }

  /**
   * toString
   *
   * @return String
   */
  public String toString() {
    return super.toString() + " : " + getUserName();
  }

  /**
   * equals
   *
   * @param anObject User
   * @return boolean
   */
  public boolean equals(Object anObject) {
    boolean eql = false;
    if (anObject != null) {
      if (anObject instanceof User) {
        User user = (User) anObject;
        eql = (user.getId() == this.getId()) ||
            (user.getUserName().equals(this.getUserName()));
      }
    }
    return eql;
  }

  /**
   *
   * @return int
   */
  public int hashCode() {
    int hash = 7;
    int var_code_id = this.getId();
    int var_code_username = (this.getName() == null) ? 0 :
        this.getUserName().hashCode();
    hash = 31 * hash + var_code_id;
    hash = 31 * hash + var_code_username;
    return hash;
  }

  /**
   * addRole
   *
   * @param anRole Role
   * @return boolean
   */
  public boolean addRole(Role anRole) {
    if (!hasRole(anRole)) {
      roles.add(anRole);
      return true;
    }
    return false;
  }

  /**
   * deleteRole
   *
   * @param anRole Role
   * @return boolean
   */
  public void deleteRole(Role anRole) {
    roles.remove(anRole);
  }

  public boolean hasRole(Role role) {
    return roles.contains(role);
  }

  public boolean checkPasswod(String password) {
    return this.password.equals(password);
  }
}
